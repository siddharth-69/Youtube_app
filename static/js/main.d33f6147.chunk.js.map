{"version":3,"sources":["components/SearchBar.js","components/VideoDetail.js","components/VideoItem.js","components/VideoList.js","api/youtube.js","App.js","serviceWorker.js","index.js"],"names":["onSubmit","useState","searchTerm","setSearchTerm","Paper","elevation","style","padding","TextField","fullWidth","label","value","onChange","event","target","onKeyPress","key","video","videoSrc","id","videoId","Fragment","height","frameBorder","width","title","src","Typography","variant","snippet","channelTitle","description","onVideoSelect","Grid","item","xs","display","alignItems","cursor","onClick","marginRight","alt","thumbnails","medium","url","videos","listOfVideos","map","VideoItem","container","spacing","axios","create","baseURL","App","state","selectedVideo","setState","setSelectedVideo","handleSubmit","a","youtube","get","params","part","maxResults","q","response","data","items","this","justifyContent","SearchBar","VideoDetail","VideoList","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d33f6147.chunk.js","sourcesContent":["import React, { Component,useState } from 'react'\nimport {Paper, TextField} from '@material-ui/core';\n\nexport default ({ onSubmit }) => {\n    const [searchTerm, setSearchTerm] = useState(\"\");\n  \n    const handleChange = (event) => setSearchTerm(event.target.value);\n  \n    const onKeyPress = (event) => {\n      if (event.key === \"Enter\") {\n        onSubmit(searchTerm);\n      }\n    }\n  \n    return (\n      <Paper elevation={6} style={{ padding: \"25px\" }}>\n        <TextField\n          fullWidth\n          label=\"Search...\"\n          value={searchTerm}\n          onChange={handleChange}\n          onKeyPress={onKeyPress}\n        />\n      </Paper>\n    );\n  }\n","import React from 'react'\nimport { Paper, Typography } from \"@material-ui/core\"\n\nexport default ({ video }) => {\n    if (!video) return <div>Loading...</div>;\n  \n    const videoSrc = `https://www.youtube.com/embed/${video.id.videoId}`;\n  \n    return (\n      <React.Fragment>\n        <Paper elevation={6} style={{ height: \"70%\" }}>\n          <iframe\n            frameBorder=\"0\"\n            height=\"100%\"\n            width=\"100%\"\n            title=\"Video Player\"\n            src={videoSrc}\n          />\n        </Paper>\n        <Paper elevation={6} style={{ padding: \"12px\" }}>\n          <Typography variant=\"h4\">\n            {video.snippet.title} - {video.snippet.channelTitle}\n          </Typography>\n          <Typography variant=\"subtitle1\">\n            {video.snippet.channelTitle}\n          </Typography>\n          <Typography variant=\"subtitle2\">{video.snippet.description}</Typography>\n        </Paper>\n      </React.Fragment>\n    );\n  }\n","import React from \"react\";\nimport { Grid, Paper, Typography } from \"@material-ui/core\";\n\nexport default ({ video, onVideoSelect }) => {\n  return (\n    <Grid item xs={12}>\n      <Paper style={{ display: \"flex\", alignItems: \"center\", cursor: \"pointer\" }} onClick={() => onVideoSelect(video)} >\n        <img style={{ marginRight: \"5px\" }} alt=\"thumbnail\" src={video.snippet.thumbnails.medium.url} />\n        <Typography variant=\"subtitle1\">\n          <b>{video.snippet.title}</b>\n        </Typography>\n      </Paper>\n    </Grid>\n  );\n}","import React, { Component } from 'react'\nimport { Grid } from \"@material-ui/core\";\nimport VideoItem from \"./VideoItem\";\n\nexport default ({ videos, onVideoSelect }) => {\n    const listOfVideos = videos.map(video => (\n      <VideoItem\n        onVideoSelect={onVideoSelect}\n        key={video.id.videoId}\n        video={video}\n      />\n    ));\n  \n    return (\n      <Grid container spacing={10}>\n        {listOfVideos}\n      </Grid>\n    );\n  }\n","import axios from 'axios'\n\nexport default axios.create({\n    baseURL: 'https://www.googleapis.com/youtube/v3'\n});","import React,{ Component} from 'react';\n\nimport { Grid } from '@material-ui/core';\nimport SearchBar from './components/SearchBar';\nimport VideoDetail from './components/VideoDetail';\nimport VideoList from './components/VideoList';\nimport './App.css';\n\nimport youtube from './api/youtube'\n\n\nclass App extends Component{\n\n  state={\n    videos:[],\n    selectedVideo: null\n  }\n\n  componentDidMount(){\n    this.handleSubmit(\"macbook\")\n  }\n\n  onVideoSelect = (video) =>{\n    this.setState({selectedVideo: video})\n  }\n\n  setSelectedVideo = (video) => {\n    this.setState({selectedVideo: video});\n  }\n\n  handleSubmit = async (searchTerm) => {\n    const response = await youtube.get(\"search\", {\n      params: {\n        part: \"snippet\",\n        maxResults: 5,\n        key: \"AIzaSyBFj8LyuNi9Zbbg9iSa8FERsU7fcLHMf5k\",\n        q: searchTerm,\n      }\n    });\n\n    this.setState({videos: response.data.items,selectedVideo: response.data.items[0]});\n  }\n\n  render(){\n    const {selectedVideo,videos} = this.state\n    return (\n      <Grid style={{ justifyContent: \"center\" }} container spacing={12}>\n        <Grid item xs={10}>\n          <Grid container spacing={10}>\n            <Grid item xs={8}>\n              <SearchBar onSubmit={this.handleSubmit} />\n            </Grid>\n            <Grid item xs={8}>\n              <VideoDetail video={selectedVideo} />\n            </Grid>\n            <Grid item xs={2}>\n              <VideoList videos={videos} onVideoSelect={this.onVideoSelect} />\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}